//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "medical_records"
    }
}

#[derive(
    Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize, Default,
)]
pub struct Model {
    pub medical_record_id: i32,
    pub pet_id: Option<i32>,
    pub creation_date: Option<DateTime>,
    pub comments: Option<String>,
    pub created_by_user_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    MedicalRecordId,
    PetId,
    CreationDate,
    Comments,
    CreatedByUserId,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    MedicalRecordId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Pets,
    Users,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::MedicalRecordId => ColumnType::Integer.def(),
            Self::PetId => ColumnType::Integer.def().null(),
            Self::CreationDate => ColumnType::DateTime.def().null(),
            Self::Comments => ColumnType::Text.def().null(),
            Self::CreatedByUserId => ColumnType::Integer.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Pets => Entity::belongs_to(super::pets::Entity)
                .from(Column::PetId)
                .to(super::pets::Column::PetId)
                .into(),
            Self::Users => Entity::belongs_to(super::users::Entity)
                .from(Column::CreatedByUserId)
                .to(super::users::Column::UserId)
                .into(),
        }
    }
}

impl Related<super::pets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Pets.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
