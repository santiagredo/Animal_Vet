//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "operating_hours"
    }
}

#[derive(
    Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize, Default,
)]
pub struct Model {
    pub operating_hour_id: i32,
    pub work_day_id: Option<i32>,
    pub open_time: Option<DateTimeWithTimeZone>,
    pub close_time: Option<DateTimeWithTimeZone>,
    pub lunch_from_time: Option<DateTimeWithTimeZone>,
    pub lunch_to_time: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    OperatingHourId,
    WorkDayId,
    OpenTime,
    CloseTime,
    LunchFromTime,
    LunchToTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    OperatingHourId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    WorkDays,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::OperatingHourId => ColumnType::Integer.def(),
            Self::WorkDayId => ColumnType::Integer.def().null(),
            Self::OpenTime => ColumnType::TimestampWithTimeZone.def().null(),
            Self::CloseTime => ColumnType::TimestampWithTimeZone.def().null(),
            Self::LunchFromTime => ColumnType::TimestampWithTimeZone.def().null(),
            Self::LunchToTime => ColumnType::TimestampWithTimeZone.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::WorkDays => Entity::belongs_to(super::work_days::Entity)
                .from(Column::WorkDayId)
                .to(super::work_days::Column::WorkDayId)
                .into(),
        }
    }
}

impl Related<super::work_days::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WorkDays.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
