//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "special_dates"
    }
}

#[derive(
    Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize, Default,
)]
pub struct Model {
    pub special_date_id: i32,
    pub service_id: Option<i32>,
    pub date: Option<Date>,
    pub is_working_date: Option<bool>,
    pub open_time: Option<Time>,
    pub close_time: Option<Time>,
    pub lunch_from_time: Option<Time>,
    pub lunch_to_time: Option<Time>,
    pub creation_date: Option<DateTime>,
    pub latest_update_date: Option<DateTime>,
    pub reason: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    SpecialDateId,
    ServiceId,
    Date,
    IsWorkingDate,
    OpenTime,
    CloseTime,
    LunchFromTime,
    LunchToTime,
    CreationDate,
    LatestUpdateDate,
    Reason,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    SpecialDateId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Services,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::SpecialDateId => ColumnType::Integer.def(),
            Self::ServiceId => ColumnType::Integer.def().null(),
            Self::Date => ColumnType::Date.def().null(),
            Self::IsWorkingDate => ColumnType::Boolean.def().null(),
            Self::OpenTime => ColumnType::Time.def().null(),
            Self::CloseTime => ColumnType::Time.def().null(),
            Self::LunchFromTime => ColumnType::Time.def().null(),
            Self::LunchToTime => ColumnType::Time.def().null(),
            Self::CreationDate => ColumnType::DateTime.def().null(),
            Self::LatestUpdateDate => ColumnType::DateTime.def().null(),
            Self::Reason => ColumnType::Text.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Services => Entity::belongs_to(super::services::Entity)
                .from(Column::ServiceId)
                .to(super::services::Column::ServiceId)
                .into(),
        }
    }
}

impl Related<super::services::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Services.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
