//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "users"
    }
}

#[derive(
    Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize, Default,
)]
pub struct Model {
    pub user_id: i32,
    pub name: Option<String>,
    pub email: Option<String>,
    pub password: Option<String>,
    pub phone_number: Option<String>,
    pub document_id: Option<String>,
    pub role: Option<i32>,
    pub creation_date: Option<DateTime>,
    pub latest_update_date: Option<DateTime>,
    pub is_enabled: Option<bool>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    UserId,
    Name,
    Email,
    Password,
    PhoneNumber,
    DocumentId,
    Role,
    CreationDate,
    LatestUpdateDate,
    IsEnabled,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    UserId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Appointments,
    MedicalRecords,
    Pets,
    Sessions,
    UserRoles,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::UserId => ColumnType::Integer.def(),
            Self::Name => ColumnType::Text.def().null(),
            Self::Email => ColumnType::Text.def().null(),
            Self::Password => ColumnType::Text.def().null(),
            Self::PhoneNumber => ColumnType::Text.def().null(),
            Self::DocumentId => ColumnType::Text.def().null(),
            Self::Role => ColumnType::Integer.def().null(),
            Self::CreationDate => ColumnType::DateTime.def().null(),
            Self::LatestUpdateDate => ColumnType::DateTime.def().null(),
            Self::IsEnabled => ColumnType::Boolean.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Appointments => Entity::has_many(super::appointments::Entity).into(),
            Self::MedicalRecords => Entity::has_many(super::medical_records::Entity).into(),
            Self::Pets => Entity::has_many(super::pets::Entity).into(),
            Self::Sessions => Entity::has_many(super::sessions::Entity).into(),
            Self::UserRoles => Entity::belongs_to(super::user_roles::Entity)
                .from(Column::Role)
                .to(super::user_roles::Column::UserRoleId)
                .into(),
        }
    }
}

impl Related<super::appointments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Appointments.def()
    }
}

impl Related<super::medical_records::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MedicalRecords.def()
    }
}

impl Related<super::pets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Pets.def()
    }
}

impl Related<super::sessions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sessions.def()
    }
}

impl Related<super::user_roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserRoles.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
